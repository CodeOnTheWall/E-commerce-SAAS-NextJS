// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  // below 3 created by prisma (id of store etc)
  id        String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  // from clerk
  userId    String
  // one to many relationship: [] i.e. 1 store has many billboards
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id        String @id @default(uuid())
  storeId   String
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Billboard can have multiple categories
  categories Category[]
  // Targetting the field storeId, and refering to id from Store model
  store      Store @relation("StoreToBillboard", fields: [storeId], references: [id])

// fixes error with relation
  @@index([storeId])
}


model Category {
  id        String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  storeId   String
  billboardId String
  // targetting the field storeId, and refering to id from Store model
  store     Store @relation("StoreToCategory", fields: [storeId], references: [id])
  // field billboardId is the referenced id from model Billboard
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products  Product[] @relation("CategoryToProduct")

// fixes error with relation
  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  // Size can only exist inside a specific store
  // targetting the field storeId, and refering to id from Store model
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// fixes error with relation
  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  storeId String
  // Color can only exist inside a specific store
  // targetting the field storeId, and refering to id from Store model
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// fixes error with relation
  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  // Color can only exist inside a specific store
  // targetting the field storeId, and refering to id from Store model
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  orderItems OrderItem[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// fixes error with relation
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())
  productId String
  // cascade allows us to delete product
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  // Model can only exist inside a specific store
  // targetting the field storeId, and refering to id from Store model
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])


  @@index([productId])
  @@index([orderId])
}

// at end run npx prisma generate before using query
// then npx prisma db push
// npx prisma migrate reset to delete all data
